# ================================================
# üì¶ 1. Import Libraries
# ================================================
import pandas as pd
import numpy as np
import joblib
import socketio
from pymongo import MongoClient
from datetime import datetime

# ================================================
# üìÅ 2. Load Pre-trained Model & Scaler
# ================================================
rf_model = joblib.load("random_forest_model.pkl")
scaler = joblib.load("Radom.pkl")

# ================================================
# üîå 3. Connect to Socket.IO Server
# ================================================
sio = socketio.Client()
sio.connect("http://localhost:5084")

# ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°
feature_cols = ['pm2_5', 'TempC', 'Windspeed', 'pm10', 'co', 'no2', 'so2', 'o3']

# MongoDB connection
mongo_uri = "mongodb://walaleemauenjit:ITQDYaNhAw3wbR6h@localhost:27017/"
mongo_client = MongoClient(mongo_uri)
db = mongo_client["weatherDB"]
collection = db["sensordatas"]

@sio.event
def connect():
    print("‚úÖ Connected to Socket.IO server!")

@sio.event
def disconnect():
    print("‚ùå Disconnected from Socket.IO server!")

# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô event ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ "sensor_data"
@sio.on("sensor_data")
def handle_sensor_data(data):
    try:
        print("üì• Received new data from sensor.")

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
        df_new = pd.DataFrame([data])

        # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        df_new['timestamp'] = pd.to_datetime(df_new['timestamp'])
        df_new['date'] = df_new['timestamp'].dt.date

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å feature ‡πÑ‡∏´‡∏°
        missing_cols = [col for col in feature_cols if col not in df_new.columns]
        if missing_cols:
            raise ValueError(f"‚ùå Missing columns: {missing_cols}")

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ (‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏±‡∏ö batch)
        daily_avg_df = df_new.groupby('date')[feature_cols].mean().reset_index()
        daily_avg_df = daily_avg_df.fillna(daily_avg_df.mean())

        # Scaling
        X_scaled = scaler.transform(daily_avg_df[feature_cols])

        # Predict
        predicted_aqi = rf_model.predict(X_scaled)
        daily_avg_df['Predicted_AQI'] = predicted_aqi

        # Save to MongoDB
        records = daily_avg_df[['date', 'Predicted_AQI']].to_dict(orient='records')
        collection.insert_many(records)

        print("‚úÖ AQI prediction saved to MongoDB.")

    except Exception as e:
        print(f"‚ö†Ô∏è Error: {e}")

# Connect to the socket server
# sio.connect("http://localhost:5084")
sio.wait()
