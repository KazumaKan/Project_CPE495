import pandas as pd
import joblib
import socketio
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
from datetime import datetime
import traceback

# ===================== üì¶ Load Model & Scaler =====================
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ‡πÅ‡∏•‡∏∞ Scaler ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
rf_model = joblib.load("random_forest_model.pkl")

try:
    scaler = joblib.load("Random.pkl")
except FileNotFoundError:
    raise FileNotFoundError("‚ùå Scaler file 'Random.pkl' not found")

# ===================== üåê Connect to Socket.IO Server =====================
# ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Socket.IO server ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
sio = socketio.Client()

# ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå AQI
feature_cols = ['pm2_5', 'pm10', 'CO', 'NO2', 'SO2', 'O3']

# ===================== ‚òÅÔ∏è Connect to MongoDB Atlas =====================
# MongoDB URI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB Atlas
mongo_uri = (
    "mongodb+srv://walaleemauenjit:ITQDYaNhAw3wbR6h"
    "@cluster0.puumjnp.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á ping ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
mongo_client = MongoClient(mongo_uri, server_api=ServerApi('1'))

try:
    mongo_client.admin.command('ping')
    print("‚úÖ Connected to MongoDB Atlas successfully")
except Exception as e:
    print(f"‚ùå MongoDB Atlas connection failed: {e}")
    exit()

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å database ‡πÅ‡∏•‡∏∞ collections ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
db = mongo_client["weatherDB"]
raw_data_collection = db["sensordatas"]
aqi_collection = db["predicted_aqi"]

# ===================== üõ†Ô∏è Define Socket.IO Event Handlers =====================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠/‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Socket.IO server
@sio.event
def connect():
    print("‚úÖ Connected to Socket.IO server")

@sio.event
def disconnect():
    print("‚ùå Disconnected from Socket.IO server")

# üì• ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å event "newSensorData"
@sio.on("newSensorData")
def handle_sensor_data(data):
    try:
        print("üì• Received new sensor data:")
        print(data)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame
        df_new = pd.DataFrame([data])

        # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime object
        try:
            df_new['timestamp'] = pd.to_datetime(df_new['timestamp'], errors='coerce')
        except Exception as e:
            print(f"‚ö†Ô∏è Timestamp parsing error: {e}")
            df_new['timestamp'] = datetime.now()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        missing = [col for col in feature_cols if col not in df_new.columns]
        if missing:
            raise ValueError(f"‚ùå Missing columns: {missing}")

        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ missing ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        df_new = df_new.fillna(df_new.mean(numeric_only=True))

        # üîç Scale ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå AQI ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•
        X_scaled = scaler.transform(df_new[feature_cols])
        predicted_aqi = rf_model.predict(X_scaled)[0]
        df_new['Predicted_AQI'] = predicted_aqi

        # üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô MongoDB
        raw_data_collection.insert_one(df_new.to_dict(orient="records")[0])
        print("‚úÖ Raw data inserted into 'sensordatas' collection")

        # üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤ AQI ‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß
        aqi_data = {
            "timestamp": df_new['timestamp'].iloc[0],
            "Predicted_AQI": float(predicted_aqi)
        }
        aqi_collection.insert_one(aqi_data)
        print(f"üå´Ô∏è Predicted AQI: {predicted_aqi:.2f}")
        print("‚úÖ AQI data saved to MongoDB")

        # üîé ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        print("üß™ Checking latest data in 'sensordatas'...")
        latest = raw_data_collection.find().sort("timestamp", -1).limit(1)
        for doc in latest:
            print("üìÑ Latest sensor data:", doc)

        # üì§ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ AQI ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
        sio.emit("predicted_aqi", {"Predicted_AQI": float(predicted_aqi)})

    except Exception as e:
        print(f"‚ö†Ô∏è Error: {e}")
        traceback.print_exc()

# ===================== üöÄ Start Socket.IO Connection =====================
# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Socket.IO server ‡∏ó‡∏µ‡πà localhost:5084 ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
sio.connect("ws://localhost:5084")
sio.wait()
