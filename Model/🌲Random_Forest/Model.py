import pandas as pd
import joblib
import socketio
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
from datetime import datetime
import traceback

# ================================================
# üìÅ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ Scaler
# ================================================
rf_model = joblib.load("random_forest_model.pkl")

try:
    scaler = joblib.load("Random.pkl")  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
except FileNotFoundError:
    raise FileNotFoundError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Scaler: Random.pkl")

# ================================================
# üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Socket.IO Server
# ================================================
sio = socketio.Client()

# üî∏ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
feature_cols = ['pm2_5', 'pm10', 'CO', 'NO2', 'SO2', 'O3']

# ================================================
# ‚òÅÔ∏è ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° MongoDB Atlas
# ================================================
mongo_uri = (
    "mongodb+srv://walaleemauenjit:ITQDYaNhAw3wbR6h"
    "@cluster0.puumjnp.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
)

mongo_client = MongoClient(mongo_uri, server_api=ServerApi('1'))

try:
    mongo_client.admin.command('ping')
    print("‚úÖ Connected to MongoDB Atlas successfully.")
except Exception as e:
    print(f"‚ùå MongoDB Atlas connection failed: {e}")
    exit()

# üî∏ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å database ‡πÅ‡∏•‡∏∞ collection
db = mongo_client["weatherDB"]
raw_data_collection = db["sensordatas"]
aqi_collection = db["predicted_aqi"]

# ================================================
# üîå EVENT HANDLERS
# ================================================
@sio.event
def connect():
    print("‚úÖ Connected to Socket.IO server!")

@sio.event
def disconnect():
    print("‚ùå Disconnected from Socket.IO server!")

# üîÑ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö event 'newSensorData' ‡πÅ‡∏ó‡∏ô
@sio.on("newSensorData")
def handle_sensor_data(data):
    try:
        print("üì• Received new data from sensor:")
        print(data)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤

        # ‚û§ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame
        df_new = pd.DataFrame([data])

        # ‚û§ ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        try:
            df_new['timestamp'] = pd.to_datetime(df_new['timestamp'], errors='coerce')
        except Exception as e:
            print(f"‚ö†Ô∏è Timestamp error: {e}")
            df_new['timestamp'] = datetime.now()

        # ‚û§ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
        missing = [col for col in feature_cols if col not in df_new.columns]
        if missing:
            raise ValueError(f"‚ùå Missing columns: {missing}")

        # ‚û§ ‡πÄ‡∏ï‡∏¥‡∏° NaN ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        df_new = df_new.fillna(df_new.mean(numeric_only=True))

        # ‚û§ Scaling ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        X_scaled = scaler.transform(df_new[feature_cols])
        predicted_aqi = rf_model.predict(X_scaled)[0]
        df_new['Predicted_AQI'] = predicted_aqi

        # ‚û§ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏•‡∏á collection ‡πÅ‡∏£‡∏Å
        raw_data_collection.insert_one(df_new.to_dict(orient="records")[0])
        print("‚úÖ Data inserted into 'sensordatas' collection.")

        # ‚û§ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AQI ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡∏á collection ‡πÅ‡∏¢‡∏Å
        aqi_data = {
            "timestamp": df_new['timestamp'].iloc[0],
            "Predicted_AQI": float(predicted_aqi)
        }
        aqi_collection.insert_one(aqi_data)
        print(f"üå´Ô∏è Predicted AQI: {predicted_aqi:.2f}")
        print("‚úÖ AQI data saved to MongoDB.")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        print("üß™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô 'sensordatas' ...")
        latest = raw_data_collection.find().sort("timestamp", -1).limit(1)
        for doc in latest:
            print("üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å sensordatas:", doc)

        # üîÑ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        sio.emit("predicted_aqi", {"Predicted_AQI": float(predicted_aqi)})

    except Exception as e:
        print(f"‚ö†Ô∏è Error: {e}")
        traceback.print_exc()  # ‡πÅ‡∏™‡∏î‡∏á stacktrace ‡∏ä‡πà‡∏ß‡∏¢ debug

# ================================================
# üîå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Socket.IO
# ================================================
sio.connect("ws://localhost:5084")
sio.wait()
