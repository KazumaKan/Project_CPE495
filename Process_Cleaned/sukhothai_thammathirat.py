#üîπ 1. Import ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from scipy import stats

#********************************************************************************************************************
#********************************************************************************************************************
# üîπ 2. ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (Air Quality)
file_path_air = "../RawData/sukhothai-thammathirat.csv"
st_air = pd.read_csv(file_path_air)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Air Quality CSV:")
print(st_air.head())

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("\n‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:")
print(st_air.info())

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
print("\n‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:")
print(st_air.isnull().sum())

# ******************************************************************************************
# üîπ 3. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå date ‡πÄ‡∏õ‡πá‡∏ô datetime
# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'date' ‡πÄ‡∏õ‡πá‡∏ô datetime
st_air["date"] = pd.to_datetime(st_air["date"], errors="coerce")

# ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
st_air.columns = st_air.columns.str.strip()

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏à‡∏≤‡∏Å object ‡πÄ‡∏õ‡πá‡∏ô float
cols = ["pm25", "pm10", "o3", "no2", "so2", "co", "psi"]
cols_available = [col for col in cols if col in st_air.columns]

st_air[cols_available] = st_air[cols_available].apply(pd.to_numeric, errors="coerce")

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á
print("\n‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á:")
print(st_air.dtypes)

# ******************************************************************************************
# üîπ 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("\nüìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Air Quality:")
print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {st_air['date'].min()} ‚Üí ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {st_air['date'].max()}")

#  ******************************************************************************************
# üî∏ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥ (Duplicates)
# ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
duplicate_rows = st_air.duplicated().sum()
print(f"\nüîÅ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {duplicate_rows}")

#  ******************************************************************************************
# üî∏ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (Missing Data) ‚Äì ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å" 
missing_percent = (st_air.isnull().mean() * 100).round(2)
print("\nüìâ ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:")
print(missing_percent[missing_percent > 0])

#  ******************************************************************************************
# üîπ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö co ‡∏Å‡∏±‡∏ö so2 ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢ 0 vs interpolate
# ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• df (‡πÉ‡∏ä‡πâ st_air ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß)
df = st_air.reset_index().copy()
df.columns = df.columns.str.strip()
df["date"] = pd.to_datetime(df["date"], errors="coerce")
df[["co", "so2"]] = df[["co", "so2"]].apply(pd.to_numeric, errors="coerce")

# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ 2020‚Äì2024
start_date = '2020-01-01'
end_date = '2024-12-31'
mask = (df['date'] >= start_date) & (df['date'] <= end_date)

# ‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ï‡∏¥‡∏° 0
df_zero = df.copy()
df_zero[["co", "so2"]] = df_zero[["co", "so2"]].fillna(0)
df_zero = df_zero[mask]

# ‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: interpolate
df_interpolate = df.copy().sort_values("date")
df_interpolate.set_index("date", inplace=True)
df_interpolate[["co", "so2"]] = df_interpolate[["co", "so2"]].interpolate(method="time")
df_interpolate.reset_index(inplace=True)
df_interpolate = df_interpolate[mask]

# üîπ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
plt.figure(figsize=(14, 6))

# üìà CO ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
plt.subplot(1, 2, 1)
plt.plot(df_zero['date'], df_zero['co'], label='Filled with 0', linestyle='--', color='orange')
plt.plot(df_interpolate['date'], df_interpolate['co'], label='Interpolated', color='blue')
plt.title("Comparison of CO (2016)")
plt.xlabel("Date")
plt.ylabel("CO")
plt.legend()

# üìà SO2 ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
plt.subplot(1, 2, 2)
plt.plot(df_zero['date'], df_zero['so2'], label='Filled with 0', linestyle='--', color='green')
plt.plot(df_interpolate['date'], df_interpolate['so2'], label='Interpolated', color='red')
plt.title("Comparison of SO2 (2016)")
plt.xlabel("Date")
plt.ylabel("SO2")
plt.legend()

plt.tight_layout()
plt.show()

#  ******************************************************************************************
# üõ† ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ NaN: ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢ Interpolation
# üîπ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pm25, pm10, o3, no2 ‡∏î‡πâ‡∏ß‡∏¢ interpolation
st_air = st_air.set_index("date")
pollutant_cols = ["pm25", "pm10", "o3", "no2"]
st_air[pollutant_cols] = st_air[pollutant_cols].interpolate(method="time")
st_air[pollutant_cols] = st_air[pollutant_cols].fillna(st_air[pollutant_cols].mean())

# üîπ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö co, so2 ‡∏î‡πâ‡∏ß‡∏¢ Interpolation
st_air[["co", "so2"]] = st_air[["co", "so2"]].interpolate(method="time")

# ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ NaN ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å interpolation ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
st_air[["co", "so2"]] = st_air[["co", "so2"]].fillna(st_air[["co", "so2"]].mean())

#  ******************************************************************************************
# üî∏ 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (Outliers)
# Boxplot ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏©
plt.figure(figsize=(12, 6))
sns.boxplot(data=st_air[cols_available])
plt.title("üì¶ Boxplot ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏£‡∏°‡∏•‡∏û‡∏¥‡∏©")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Outliers ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
total_outliers = 0

# ‡πÉ‡∏ä‡πâ IQR ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ outliers ‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
for col in cols_available:
    Q1 = st_air[col].quantile(0.25)
    Q3 = st_air[col].quantile(0.75)
    IQR = Q3 - Q1
    outliers = ((st_air[col] < (Q1 - 1.5 * IQR)) | (st_air[col] > (Q3 + 1.5 * IQR))).sum()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô outliers ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    total_rows = st_air[col].shape[0]
    print(f"üìç {col} ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_rows} ‡∏Ñ‡πà‡∏≤, ‡∏û‡∏ö Outliers {outliers} ‡∏Ñ‡πà‡∏≤")

    total_outliers += outliers

# ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Outliers ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
print(f"\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Outliers ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_outliers} ‡∏Ñ‡πà‡∏≤")

#  ******************************************************************************************
# üõ† ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Outliers ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢, ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ Capping
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
mean_cols = ['pm25']  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pm25
median_cols = ['so2', 'pm10', 'no2', 'co']  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö so2, pm10, no2, co
capping_cols = ['o3']  # ‡πÉ‡∏ä‡πâ Capping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö o3

# üîπ 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç pm25 ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
for col in mean_cols:
    Q1 = st_air[col].quantile(0.25)
    Q3 = st_air[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà outliers ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    mean_value = st_air[col].mean()
    st_air[col] = st_air[col].apply(lambda x: mean_value if x < lower_bound or x > upper_bound else x)
    print(f"üìç {col} ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç outliers ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢")

# üîπ 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç so2, pm10, no2, co ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô
for col in median_cols:
    Q1 = st_air[col].quantile(0.25)
    Q3 = st_air[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà outliers ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô
    median_value = st_air[col].median()
    st_air[col] = st_air[col].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)
    print(f"üìç {col} ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç outliers ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô")

# üîπ 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç o3 ‡∏î‡πâ‡∏ß‡∏¢ Capping
for col in capping_cols:
    Q1 = st_air[col].quantile(0.25)
    Q3 = st_air[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Capping: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô
    st_air[col] = st_air[col].apply(lambda x: lower_bound if x < lower_bound else (upper_bound if x > upper_bound else x))
    print(f"üìç {col} ‡πÉ‡∏ä‡πâ Capping ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")

# ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
print("\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç outliers ‡πÅ‡∏•‡πâ‡∏ß")

#  ******************************************************************************************
#üî∏ 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Correlation)
plt.figure(figsize=(10, 8))
sns.heatmap(st_air[cols_available].corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("üìä Heatmap ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏°‡∏•‡∏û‡∏¥‡∏©")
plt.show()

#  ******************************************************************************************
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì AQI
def calc_aqi(value, bins, aqi_range):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì AQI ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏°‡∏•‡∏û‡∏¥‡∏©‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ binning ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á AQI"""
    for i in range(len(bins) - 1):
        if bins[i] <= value < bins[i + 1]:
            return ((aqi_range[i + 1] - aqi_range[i]) / (bins[i + 1] - bins[i])) * (value - bins[i]) + aqi_range[i]
    return aqi_range[-1]  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

# ‡πÄ‡∏Å‡∏ì‡∏ë‡πå AQI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏•‡∏û‡∏¥‡∏©
pollutant_bins = {
    'pm25': [0, 25, 37, 50, 90, float('inf')],
    'pm10': [0, 50, 80, 120, 180, float('inf')],
    'co': [0, 4.4, 6.4, 9.0, 30, float('inf')],
    'o3': [0, 35, 50, 70, 120, float('inf')],
    'no2': [0, 60, 106, 170, 340, float('inf')],
    'so2': [0, 100, 200, 300, 400, float('inf')]
}

# ‡∏ä‡πà‡∏ß‡∏á AQI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏•‡∏û‡∏¥‡∏©
aqi_ranges = {
    'pm25': [0, 25, 50, 100, 200, 500],
    'pm10': [0, 25, 50, 100, 200, 500],
    'co': [0, 25, 50, 100, 200, 500],
    'o3': [0, 25, 50, 100, 200, 500],
    'no2': [0, 25, 50, 100, 200, 500],
    'so2': [0, 25, 50, 100, 200, 500]
}

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì AQI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß
def calculate_aqi(row):
    aqi_values = [
        calc_aqi(row['pm25'], pollutant_bins['pm25'], aqi_ranges['pm25']),
        calc_aqi(row['pm10'], pollutant_bins['pm10'], aqi_ranges['pm10']),
        calc_aqi(row['co'], pollutant_bins['co'], aqi_ranges['co']),
        calc_aqi(row['o3'], pollutant_bins['o3'], aqi_ranges['o3']),
        calc_aqi(row['no2'], pollutant_bins['no2'], aqi_ranges['no2']),
        calc_aqi(row['so2'], pollutant_bins['so2'], aqi_ranges['so2'])
    ]
    return max(aqi_values)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "level_0"
if "level_0" in st_air.columns:
    # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "level_0"
    st_air.drop("level_0", axis=1, inplace=True)

# ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï index
st_air.reset_index(inplace=True)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì AQI ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô DataFrame
st_air['AQI'] = st_air.apply(calculate_aqi, axis=1)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• AQI
print(st_air[['date', 'AQI']].head())

#  ******************************************************************************************
#  ******************************************************************************************
# üîπ 1. ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® 
file_path_air = "../RawData/sukhothai-thammathirat  2020-2024.csv"
st_weather = pd.read_csv(file_path_air)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Air Quality CSV:")
print(st_weather.head())

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("\n‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:")
print(st_weather.info())

#  ******************************************************************************************
# üîπ 2. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå date ‡πÄ‡∏õ‡πá‡∏ô datetime
# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'date' ‡πÄ‡∏õ‡πá‡∏ô datetime
st_weather["date"] = pd.to_datetime(st_weather["date"], errors="coerce")

# ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
st_weather.columns = st_weather.columns.str.strip()

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á
print("\n‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á:")
print(st_weather.dtypes)

# ******************************************************************************************
# üîπ 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("\nüìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Air Quality:")
print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {st_weather['date'].min()} ‚Üí ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {st_weather['date'].max()}")

#  ******************************************************************************************
# üî∏ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥ (Duplicates)
duplicates = st_weather.duplicated()
print(f"\nüîÅ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô: {duplicates.sum()}")
if duplicates.any():
    print("‚Üí ‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:")
    print(st_weather[duplicates].head())

#  ******************************************************************************************
# üî∏ 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (Missing Data)
missing_counts = st_weather.isnull().sum()
missing_percent = (missing_counts / len(st_weather)) * 100
print("\nüö´ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:")
print(pd.DataFrame({"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢": missing_counts, "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)": missing_percent.round(2)}))

# ‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ mean ‡∏´‡∏£‡∏∑‡∏≠ median ‡∏≠‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
# ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
print(st_weather[["tavg", "tmin", "tmax", "prcp", "wdir", "wspd", "pres"]].describe().T)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì median ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡πÜ
medians = st_weather[["tavg", "tmin", "tmax", "prcp", "wdir", "wspd", "pres"]].median()
print("\nüìå ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô (Median):")
print(medians)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
plt.figure(figsize=(14, 8))
cols_to_plot = ["tavg", "tmin", "tmax", "prcp", "wdir", "wspd", "pres"]

# ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü boxplot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
for i, col in enumerate(cols_to_plot, 1):
    plt.subplot(2, 4, i)
    sns.boxplot(data=st_weather, y=col)
    plt.title(col)

plt.tight_layout()
plt.show()

# üõ† ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Missing ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢, ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
# ‡πÉ‡∏ä‡πâ mean
mean_cols = ["tavg", "tmax", "pres"]
st_weather[mean_cols] = st_weather[mean_cols].fillna(st_weather[mean_cols].mean())

# ‡πÉ‡∏ä‡πâ median
median_cols = ["tmin", "prcp", "wdir", "wspd"]
st_weather[median_cols] = st_weather[median_cols].fillna(st_weather[median_cols].median())

# ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
st_weather = st_weather.drop(columns=["snow", "wpgt", "tsun"])

#  ******************************************************************************************
# üî∏ 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (Outliers) ‡∏î‡πâ‡∏ß‡∏¢ IQR
numeric_cols = st_weather.select_dtypes(include='number').columns
total_outliers = 0

# üîπ Boxplot
plt.figure(figsize=(14, 8))
sns.boxplot(data=st_weather[numeric_cols])
plt.title("üì¶ Boxplot ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("\n‚ö†Ô∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (Outliers):")
total_outliers = 0

for col in numeric_cols:
    Q1 = st_weather[col].quantile(0.25)
    Q3 = st_weather[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    outliers = ((st_weather[col] < lower_bound) | (st_weather[col] > upper_bound)).sum()
    total_rows = st_weather[col].shape[0]

    print(f"üìç {col} ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_rows} ‡∏Ñ‡πà‡∏≤, ‡∏û‡∏ö Outliers {outliers} ‡∏Ñ‡πà‡∏≤")

    total_outliers += outliers

# ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Outliers ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
print(f"\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Outliers ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {total_outliers} ‡∏Ñ‡πà‡∏≤")

# üõ† Outliers
# üîπ tavg, tmin, tmax, pres ‚Üí ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ median
cols_replace_with_median = ["tavg", "tmin", "tmax", "pres"]

for col in cols_replace_with_median:
    Q1 = st_weather[col].quantile(0.25)
    Q3 = st_weather[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    median = st_weather[col].median()
    st_weather[col] = st_weather[col].apply(lambda x: median if x < lower or x > upper else x)

# üîπ wspd ‚Üí Clip ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å IQR boundary ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤ boundary)
Q1 = st_weather["wspd"].quantile(0.25)
Q3 = st_weather["wspd"].quantile(0.75)
IQR = Q3 - Q1
lower = Q1 - 1.5 * IQR
upper = Q3 + 1.5 * IQR
st_weather["wspd"] = st_weather["wspd"].clip(lower, upper)

# üîπ prcp ‚Üí ‡πÉ‡∏ä‡πâ log transform (log1p = log(1 + x) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á log(0))
st_weather["prcp_log"] = np.log1p(st_weather["prcp"])

# üîπ ‡πÅ‡∏Å‡πâ tmin, tmax: Use clip instead of median to handle outliers
for col in ["tmin", "tmax"]:
    Q1 = st_weather[col].quantile(0.25)
    Q3 = st_weather[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    st_weather[col] = st_weather[col].clip(lower, upper)
    
#  ******************************************************************************************
# üî∏ 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Correlation)
print("\nüìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£:")
correlation_matrix = st_weather[numeric_cols].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5)
plt.title("üîó Heatmap ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£")
plt.tight_layout()
plt.show()

#  ******************************************************************************************
#  ******************************************************************************************
# Filter the data for the period 2020-2024
start_date = '2020-01-01'
end_date = '2024-12-31'

# Filter air quality data (st_air)
st_air_filtered = st_air[(st_air['date'] >= start_date) & (st_air['date'] <= end_date)]

# Filter weather data (st_weather)
st_weather_filtered = st_weather[(st_weather['date'] >= start_date) & (st_weather['date'] <= end_date)]

# Step 2: Merge the two datasets on the 'date' column
merged_data = pd.merge(st_air_filtered, st_weather_filtered, on='date', how='inner')

# Show the merged data
print("\nüîó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏à‡∏≤‡∏Å Air Quality ‡πÅ‡∏•‡∏∞ Weather Data:")
print(merged_data.head())

# ‡∏•‡∏ö index,level_0 ,prcp_log  ,tmin  ,tmax   
columns_to_drop = ['index', 'level_0', 'prcp_log', 'tmin', 'tmax']
merged_data = merged_data.drop(columns=[col for col in columns_to_drop if col in merged_data.columns])

#  ******************************************************************************************
# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• df_merged
# üîπ 1. ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("üìå ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
print(merged_data.columns)

# üîπ 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("\nüìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {merged_data['date'].min()} ‚Üí ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {merged_data['date'].max()}")

# üîπ 3. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
merged_data['Year'] = merged_data['date'].dt.year  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ
merged_data['Month'] = merged_data['date'].dt.month  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

monthly_counts_by_year = merged_data.groupby(['Year', 'Month']).size().unstack()

print("\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ:")
print(monthly_counts_by_year)

# üîπ 4. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
print("\nüìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
print(merged_data.describe())

# üîπ 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ
merged_data['Year'] = merged_data['date'].dt.year  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
yearly_counts = merged_data['Year'].value_counts().sort_index()
print("\nüìÜ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ:")
print(yearly_counts)

# üîπ 6. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ
total_records = yearly_counts.sum()

print("\nüìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô:")
print(total_records)

print(merged_data.dtypes)
#********************************************************************************************************************
# üîπ ‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
numeric_cols = merged_data.select_dtypes(include=[np.number]).columns
merged_data[numeric_cols] = merged_data[numeric_cols].round(2)

merged_data.reset_index(drop=True, inplace=True)
print("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°:")
print(merged_data.head(10))

# üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Month, Year)
merged_data = merged_data.drop(columns=['Month', 'Year'], errors='ignore')

output_file_path = "../AvailableData/sukhothai_thammathirat_cleaned_v1.csv"
merged_data.to_csv(output_file_path, index=False)
print(f"\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà: {output_file_path}")
